#-*- coding: UTF-8 -*-

'''
#用梯度下降的方法快速解决线性回归问题
'''
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

#构建数据
points_num=100
vectors=[]
for i in xrange(points_num):
    x1=np.random.normal(0.0,0.66)
    y1=0.1*x1+0.2+np.random.normal(0.0,0.04)
    vectors.append([x1,y1])

x_data=[v[0] for v in vectors]
y_data=[v[1] for v in vectors]

plt.plot(x_data,y_data,'r*',label="original data")
plt.title("dot collection")
plt.legend()
plt.show()

#构建线性回归模型，并初始化W和b
W = tf.Variable(tf.random_uniform([1],-1.0,1.0))
b = tf.Variable(tf.zeros([1]))
y = W*x_data + b

#定义损失函数loss
loss=tf.reduce_mean(tf.square(y-y_data))

#用梯度下降的优化器来优化loss
optimizer=tf.train.GradientDescentOptimizer(0.5)#设置学习率为0.5
train=optimizer.minimize(loss)

#构建会话
sess=tf.Session()

#运行初始化命令，初始化所有参数
init=tf.global_variables_initializer()
sess.run(init)

#训练20步
for step in xrange(20):
    sess.run(train)
    print("step=%d,loss=%f,[weight=%f bias=%f]")%(step,sess.run(loss),sess.run(W),sess.run(b))

#绘制出点以及拟合后的曲线
plt.plot(x_data,y_data,'r*',label="original data")
plt.plot(x_data,x_data*sess.run(W)+sess.run(b),'b',label="fitted line")
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.show()


#关闭会话
sess.close()

